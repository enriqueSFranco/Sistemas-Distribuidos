/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ljdc.practica3_refactorizacion.general.gui;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import ljdc.practica3_refactorizacion.general.ManejadorDeConfiguracion;
import ljdc.practica3_refactorizacion.general.InfoServidor;

/**
 *
 * @author Dave
 */
public class GUIConfiguracion extends javax.swing.JFrame {

    private static final String IPV4_REGEX = "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\\.(?!$)|$)){4}$";
    private static final Pattern IPV4_PATTERN = Pattern.compile(IPV4_REGEX);
    private static final String PORT_REGEX = "[1-9][0-9]*";
    private static final Pattern PORT_PATTERN = Pattern.compile(PORT_REGEX);
    
    private ManejadorDeConfiguracion config;
    /**
     * Creates new form GUIConfiguracion
     * @param ruta_archivo Ruta de la configuracion a la que se pretende acceder
     */
    public GUIConfiguracion(String ruta_archivo) {
        initComponents();
        
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        
        cargarConfiguracion(ruta_archivo);
    }
    
    private void cargarConfiguracion(String ruta_archivo){
        
        this.config = new ManejadorDeConfiguracion(ruta_archivo);
        this.tf_puertohost.setText(""+this.config.getConfiguracion().getPuerto());
        
        DefaultTableModel modelo = (DefaultTableModel) this.tbl_servidores.getModel();
        for( int i = 0; i<modelo.getRowCount();i++ ){
            modelo.removeRow(0);
        }
        
        this.config.getConfiguracion().getServidores().forEach(info -> {
            modelo.addRow(new Object[]{
                info.getDireccion(),
                info.getPuerto(),
                info.getDireccion().equals(this.config.getConfiguracion().getServidor_principal()), 
                info.getDireccion().getHostAddress().equals(this.config.getConfiguracion().getServidor_sincronizacion().getDireccion().getHostAddress())
                    && info.getPuerto() == this.config.getConfiguracion().getServidor_sincronizacion().getPuerto()
            });
        });
    }
    
    public static boolean esIPV4Valido(final String ip) {
        Matcher matcher = IPV4_PATTERN.matcher(ip);
        return matcher.matches();
    }

    public static boolean esPuertoValido(final String port) {
        Matcher matcher = PORT_PATTERN.matcher(port);
        return matcher.matches();
    }
    
    private boolean sonCorrectosDatosServidores(){
        boolean sonCorrectos = true;
        DefaultTableModel modelo = (DefaultTableModel) this.tbl_servidores.getModel();
        for(int i = 0; i<modelo.getRowCount() && sonCorrectos ;i++ ){
            sonCorrectos = esIPV4Valido( modelo.getValueAt(i, 0).toString() ) & esPuertoValido( ((Integer)modelo.getValueAt(i, 1)).toString() );
        }
        return sonCorrectos;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        tf_puertohost = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_servidores = new javax.swing.JTable();
        btn_agregar = new javax.swing.JButton();
        btn_eliminar = new javax.swing.JButton();
        btn_guardar = new javax.swing.JButton();
        lbl_error = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Editar Configuraci칩n");

        jLabel2.setText("Puerto de Host:");

        jLabel5.setText("Servidores:");

        tbl_servidores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Direcci칩n", "Puerto", "Principal", "Sincronizador"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tbl_servidores.setCellSelectionEnabled(true);
        tbl_servidores.setRequestFocusEnabled(false);
        tbl_servidores.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tbl_servidores);
        tbl_servidores.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        btn_agregar.setText("A침adir Servidor");
        btn_agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_agregarActionPerformed(evt);
            }
        });

        btn_eliminar.setText("Eliminar Servidor");
        btn_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminarActionPerformed(evt);
            }
        });

        btn_guardar.setText("Guardar Configuraci칩n");
        btn_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_guardarActionPerformed(evt);
            }
        });

        lbl_error.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbl_error, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_guardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tf_puertohost, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(btn_agregar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_eliminar)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tf_puertohost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_agregar)
                    .addComponent(btn_eliminar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_error, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_guardar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) this.tbl_servidores.getModel();
        if(this.tbl_servidores.getSelectedRow() != -1)
            modelo.removeRow(this.tbl_servidores.getSelectedRow());
        else
            JOptionPane.showMessageDialog(null, "No se ha seleccionado el servidor");
    }//GEN-LAST:event_btn_eliminarActionPerformed

    private void btn_agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_agregarActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) this.tbl_servidores.getModel();
        modelo.addRow(new Object[]{"localhost", 7000,false, false});
    }//GEN-LAST:event_btn_agregarActionPerformed

    private void btn_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_guardarActionPerformed
        DefaultTableModel modelo;
        if (this.tbl_servidores.isEditing()){
            this.lbl_error.setText("Termine de editar los datos");
        }else if ( !esPuertoValido(this.tf_puertohost.getText()) ){
            this.lbl_error.setText("El puerto de host no es valido");
        }else if (sonCorrectosDatosServidores()){
            this.lbl_error.setText("Algunos datos de los servidores son invalidos");
        }else{
            this.config.getConfiguracion().setPuerto(Integer.parseInt(this.tf_puertohost.getText()));
            modelo = (DefaultTableModel) this.tbl_servidores.getModel();
            this.config.getConfiguracion().getServidores().clear();
            for( int i=0; i<modelo.getRowCount(); i++ ){
                try {
                    String [] nombre_direccion = modelo.getValueAt(i, 0).toString().split("/");
                    int puerto_actual = (int) modelo.getValueAt(i, 1);
                    System.out.print("Direccion: "+nombre_direccion[nombre_direccion.length-1] + "\tPuerto: "+puerto_actual + "\t");
                    this.config.getConfiguracion().getServidores().add(new InfoServidor(
                            InetAddress.getByName(nombre_direccion[nombre_direccion.length-1]) ,
                            (int) modelo.getValueAt(i, 1)));
                    if ( (boolean) modelo.getValueAt(i, 2) ){
                        this.config.getConfiguracion().setServidor_principal(InetAddress.getByName(nombre_direccion[nombre_direccion.length-1]));
                    }
                    if ( (boolean) modelo.getValueAt(i, 3) ){
                        System.out.print("Es Sincronizador");
                        this.config.getConfiguracion().setServidor_sincronizacion(new InfoServidor(InetAddress.getByName(nombre_direccion[nombre_direccion.length-1]), puerto_actual));
                    }
                    System.out.println("\n");
                } catch (UnknownHostException ex) {
                    Logger.getLogger(GUIConfiguracion.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            this.config.guardarConfiguracion();
            this.dispose();
        }
    }//GEN-LAST:event_btn_guardarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_agregar;
    private javax.swing.JButton btn_eliminar;
    private javax.swing.JButton btn_guardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbl_error;
    private javax.swing.JTable tbl_servidores;
    private javax.swing.JTextField tf_puertohost;
    // End of variables declaration//GEN-END:variables
}
